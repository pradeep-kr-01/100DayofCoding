public class recursionBasics{
    
//Fibbonacci Series   
    public static int fibbo(int n){
        if(n==0 || n==1){
            return n;
        }           
        int fnm1 = fibbo(n-1);
        int fnm2 = fibbo(n-2);
        int fn = fnm1 + fnm2;
        return fn;
    }

//Checking an array is Sorted or not
    public static boolean isSorted(int arr[], int i){
        if(i == arr.length-1){
            return true;
        }
        if(arr[i] > arr[i+1]){
            return false;
        }
        return isSorted(arr, i+1);
    }

//First occurence
    public static int firstOccurence(int arr[], int key, int i){
        if(i == arr.length){
            return -1;
        }
        if(arr[i] == key){
            return i;
        }

    return firstOccurence(arr, key, i+1);
    } 

//Last Occurence
    public static int lastOccurence(int arr[], int key, int i){
        if(i == arr.length){
            return -1;
        }
        int isFound = lastOccurence(arr, key, i+1);
        if(isFound == -1 && arr[i] == key){
            return i;
        }
        return isFound;
    }
    public static void main(String[] args) {

        int arr[] = {1,2,3,4,5,10,6,4,7};
        System.out.println(fibbo(10));
        System.out.println(isSorted(arr, 0));
        System.out.println(firstOccurence(arr, 4, 0));
        System.out.println(lastOccurence(arr, 4, 0));
    }
}
